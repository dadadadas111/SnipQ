name: Core CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'core/**'
      - '.github/workflows/core.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'core/**'
      - '.github/workflows/core.yml'

jobs:
  test:
    name: Test Core
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./core

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        cache-dependency-path: core/go.sum

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('core/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./core/coverage.out
        flags: core
        name: core-coverage

  build:
    name: Build Core
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    defaults:
      run:
        working-directory: ./core

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        cache-dependency-path: core/go.sum

    - name: Build CLI (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        go build -v -o snipq-${{ runner.os }}-amd64 ./cmd/cli
        ./snipq-${{ runner.os }}-amd64 --help || true

    - name: Build CLI (Windows)
      if: runner.os == 'Windows'
      run: |
        go build -v -o snipq-${{ runner.os }}-amd64.exe ./cmd/cli
        ./snipq-${{ runner.os }}-amd64.exe --help

    - name: Test basic functionality
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          ./snipq-${{ runner.os }}-amd64.exe init
          ./snipq-${{ runner.os }}-amd64.exe list
        else
          ./snipq-${{ runner.os }}-amd64 init
          ./snipq-${{ runner.os }}-amd64 list
        fi
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: snipq-cli-${{ runner.os }}
        path: |
          core/snipq-*
        retention-days: 30

  lint:
    name: Lint Core
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./core

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: core
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./core

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Download dependencies
      run: go mod download

    - name: Install Gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: gosec -fmt sarif -out gosec.sarif -stdout -verbose ./...

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: core/gosec.sarif
